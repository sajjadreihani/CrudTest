@page "/CustomerList"

@using WebUI.Data
@inject MediatR.IMediator mediator
@inject NavigationManager NavigationManager

<h1>Customers List</h1>

<form>
    <div class="row">
        <div class="col">
            <input type="text" @bind-value="customersQuery.Name" class="form-control" @onkeyup="LoadData" placeholder="Name">
        </div>
        <div class="col">
            <input type="text" @bind-value="customersQuery.Email" class="form-control" @onkeyup="LoadData" placeholder="Email">
        </div>
        <div class="col">
            <input type="text" @bind-value="customersQuery.PhoneNumber" class="form-control" @onkeyup="LoadData" placeholder="Phone Number">
        </div>
    </div>
</form>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table mt-2">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Date of Birth</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Account Number</th>
                <th>Operation</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers.List)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.DateOfBirth</td>
                    <td>@customer.Email</td>
                    <td>@customer.PhoneNumber</td>
                    <td>@customer.BankAccountNumber</td>
                    <td>
                        <button type="button" class="btn btn-primary mr-1" @onclick="@(e => Edit(e, customer.Id))">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="@(e => Delete(e, customer.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item">
                <button class="page-link"  disabled="@(customersQuery.PageNumber == 0)" @onclick="@(e=>ToPage(e,customersQuery.PageNumber-1))" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </button>
            </li>
            @for (int i = 0; i <= (customers.TotalLength/customersQuery.RowCount); i++)
            {

            <li class="page-item"><button class="page-link" disabled="@(customersQuery.PageNumber == i)"  @onclick="@(e=>ToPage(e,i))">@(i+1)</button></li>
            }
            <li class="page-item">
                <button class="page-link" @onclick="@(e=>ToPage(e,customersQuery.PageNumber+1))" disabled="@(customersQuery.PageNumber == (customers.TotalLength/customersQuery.RowCount))" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </button>
            </li>
        </ul>
    </nav>
}

@code {
    private Application.Customers.Queries.GetCustomers.GetCustomersQuery customersQuery;
    private Application.Common.Models.PaggingData<Application.Customers.Queries.GetCustomers.CustomersDto> customers;

    private void Edit(MouseEventArgs e, long CustomerId)
    {
        NavigationManager.NavigateTo("CreateCustomer/" + CustomerId);
    }

    private async Task Delete(MouseEventArgs e, long CustomerId)
    {
        await mediator.Send(new Application.Customers.Command.DeleteCustomer.DeleteCustomerCommand()
        {
            Id = CustomerId
        });

        await LoadData();
    }

    private async Task ToPage(MouseEventArgs e,int pageNumber)
    {
        customersQuery.PageNumber = pageNumber;

        await LoadData();
    }

    private async Task LoadData()
    {
        customers = await mediator.Send(customersQuery);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        customersQuery = new Application.Customers.Queries.GetCustomers.GetCustomersQuery()
        {
            PageNumber = 0,
            RowCount = 10
        };

        await LoadData();
    }
}
